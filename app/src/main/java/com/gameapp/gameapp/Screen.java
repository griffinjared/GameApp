package com.gameapp.gameapp;

import android.app.Activity;
import android.content.Context;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.util.Log;
import android.view.MotionEvent;
import android.view.SurfaceHolder;
import android.view.SurfaceView;

import levels.Level;
import levels.Level_Demo;

/** The Screen class used to be called "gameClass"
 *  Instead, it is now the graphics portion of the Game and only the graphics portion
 *  Since it extends SurfaceView, the Screen is nothing but a layer of graphics that is put over the Game Class
 *  Once the Screen is generated by the Game class, the MainThread is generated by the Screen class's constructor
 *  The onDraw method is where all graphics are rendered
 *  The update method is where all the game's numbers are updated every frame
 *  onDraw and update are both repeatedly called by the the MainThread every frame
 */

public class Screen extends SurfaceView implements SurfaceHolder.Callback {

    private static final String TAG = Screen.class.getSimpleName();

    //Primary Components
    private MainThread thread;
    private SeedGenerator seeder;
    private Level level; //one instant of the level can be used for all levels

    public Screen(Context context) {
        super(context);
        getHolder().addCallback(this);

        //create the game loop thread
        thread = new MainThread(getHolder(), this);

        //Game components
        seeder = new SeedGenerator();
        level = new Level_Demo(getContext(), 1);

        setFocusable(true);

        setBackgroundColor(Color.LTGRAY);
    }

    @Override
    public void surfaceChanged(SurfaceHolder holder, int format, int width, int height) {

    }

    @Override
    public void surfaceCreated(SurfaceHolder holder) {
        thread.setRunning(true);
        thread.start();
    }

    @Override
    public void surfaceDestroyed(SurfaceHolder holder) {
        boolean retry = true;
        while (retry) {
            try {
                thread.join();
                retry = false;
            } catch (InterruptedException e) {
                //try again shutting down the thread
            }
        }
    }

    @Override
    public boolean onTouchEvent(MotionEvent event) {
        if(event.getAction() == MotionEvent.ACTION_DOWN) {
            if(event.getY() > getHeight() - 50) {
                thread.setRunning(false);
                ((Activity)getContext()).finish();
            } else {
                Log.d(TAG, "Coords: x=" + event.getX() + ",y=" + event.getY());
            }
        }
        return super.onTouchEvent(event);
    }

    public void update() {

    }

    @Override
    /** The Paint class can probably used for any on-screen text.
     *  It cannot however, draw complex graphics and is limited to text and simple shapes like circle and rectangles
     */
    protected void onDraw(Canvas canvas) {
        Paint paint = new Paint();

        for (int i = 0; i < level.getCurrentRoom().getTiles().size(); i++) {
            level.getCurrentRoom().getTiles().get(i).draw(canvas, paint);
        }

        //HUD, UI, and On-Screen Text
        paint.setColor(Color.RED);
        paint.setTextAlign(Paint.Align.CENTER);
        paint.setTextSize(20);
        canvas.drawText("Crawler", getWidth()/2, getHeight()/2, paint);
    }
}
